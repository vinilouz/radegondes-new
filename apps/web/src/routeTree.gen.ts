/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProtectedPlanosIndexRouteImport } from './routes/_protected/planos/index'
import { Route as ProtectedPlanosStudyIdIndexRouteImport } from './routes/_protected/planos/$studyId/index'
import { Route as ProtectedPlanosStudyIdDisciplineIdRouteImport } from './routes/_protected/planos/$studyId/$disciplineId'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedPlanosIndexRoute = ProtectedPlanosIndexRouteImport.update({
  id: '/planos/',
  path: '/planos/',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedPlanosStudyIdIndexRoute =
  ProtectedPlanosStudyIdIndexRouteImport.update({
    id: '/planos/$studyId/',
    path: '/planos/$studyId/',
    getParentRoute: () => ProtectedRoute,
  } as any)
const ProtectedPlanosStudyIdDisciplineIdRoute =
  ProtectedPlanosStudyIdDisciplineIdRouteImport.update({
    id: '/planos/$studyId/$disciplineId',
    path: '/planos/$studyId/$disciplineId',
    getParentRoute: () => ProtectedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/planos': typeof ProtectedPlanosIndexRoute
  '/planos/$studyId/$disciplineId': typeof ProtectedPlanosStudyIdDisciplineIdRoute
  '/planos/$studyId': typeof ProtectedPlanosStudyIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/planos': typeof ProtectedPlanosIndexRoute
  '/planos/$studyId/$disciplineId': typeof ProtectedPlanosStudyIdDisciplineIdRoute
  '/planos/$studyId': typeof ProtectedPlanosStudyIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/_protected/planos/': typeof ProtectedPlanosIndexRoute
  '/_protected/planos/$studyId/$disciplineId': typeof ProtectedPlanosStudyIdDisciplineIdRoute
  '/_protected/planos/$studyId/': typeof ProtectedPlanosStudyIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/planos'
    | '/planos/$studyId/$disciplineId'
    | '/planos/$studyId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/login'
    | '/planos'
    | '/planos/$studyId/$disciplineId'
    | '/planos/$studyId'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/dashboard'
    | '/login'
    | '/_protected/planos/'
    | '/_protected/planos/$studyId/$disciplineId'
    | '/_protected/planos/$studyId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/planos/': {
      id: '/_protected/planos/'
      path: '/planos'
      fullPath: '/planos'
      preLoaderRoute: typeof ProtectedPlanosIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/planos/$studyId/': {
      id: '/_protected/planos/$studyId/'
      path: '/planos/$studyId'
      fullPath: '/planos/$studyId'
      preLoaderRoute: typeof ProtectedPlanosStudyIdIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/planos/$studyId/$disciplineId': {
      id: '/_protected/planos/$studyId/$disciplineId'
      path: '/planos/$studyId/$disciplineId'
      fullPath: '/planos/$studyId/$disciplineId'
      preLoaderRoute: typeof ProtectedPlanosStudyIdDisciplineIdRouteImport
      parentRoute: typeof ProtectedRoute
    }
  }
}

interface ProtectedRouteChildren {
  ProtectedPlanosIndexRoute: typeof ProtectedPlanosIndexRoute
  ProtectedPlanosStudyIdDisciplineIdRoute: typeof ProtectedPlanosStudyIdDisciplineIdRoute
  ProtectedPlanosStudyIdIndexRoute: typeof ProtectedPlanosStudyIdIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedPlanosIndexRoute: ProtectedPlanosIndexRoute,
  ProtectedPlanosStudyIdDisciplineIdRoute:
    ProtectedPlanosStudyIdDisciplineIdRoute,
  ProtectedPlanosStudyIdIndexRoute: ProtectedPlanosStudyIdIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
